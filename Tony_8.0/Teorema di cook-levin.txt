Teorema di cook-levin: lo usiamo per dimostrare che un linguaggio SAT è NP- completo
Per dimostrarlo il problema viene diviso in due parti la prima SAT appartiene ad NP, perché esiste una macchina di Turing non deterministica che può decidere tutti i problemi in SAT. Questa macchina effettua in modo non deterministico tutte le possibili combinazioni alla formula booleana e se almeno una delle assegnazioni soddisfa la formula la macchina è accettata

Teorema formale : Un problema decisionale appartiene ad NP se una macchina di Turing non deterministica può calcolare la soluzione in tempo polinomiale.
Un problema decisionale è NP-completo se appartiene a NP e se ogni problema appartenente ad NP può essere ridotto ad esso in tempo polinomiale.
Un'istanza del problema di soddisfacibilità booleana è un'espressione booleana che combina variabili booleane usando degli operatori booleani. Un'espressione è soddisfacibile se c'è almeno un assegnamento di valori di verità alle variabili tale che l'espressione sia vera.

Per la seconda bisogna prendere un linguaggio L che appartiene a NP e definire una riduzione polinomiale da L a SAT e prendiamo una macchina di Turing non deterministica M che per ogni stringa  bisogna costruire l'espressione booleana ϕ(M,V) tale che la stringa appartente a L abbia una doppia implicazione con questa ϕ. Con questa V possiamo costruire espressioni di tipo booleano ci si trova una computazione che accetta la stringa e si crea la tabella di computazione che simula una macchina di Turing. La ϕ è formata da quattro elementi ϕcella, ϕstart, ϕmove e la ϕaccept. La ϕcell ci rende sicuri che nella tabella ci sia uno e solo simbolo in ogni cella con complessità di 2^k, ϕstart è la riga iniziale, mentre ϕaccept se diventa vera vuol dire che la stringa è accettata ed esiste nella tabella uno stato d'accettazione mentre ϕmove ci esprime che esiste una sequenza valida di computazione  e quindi ci possiamo muovere. Quando tutte le 4 ϕ sono vere allora possiamo dire che la stringa appartiene ad L e quindi possiamo dire che L è riducibile a tempo polinomiale a SAT e quindi possiamo dire che tutti i linguaggi sono NP-complete